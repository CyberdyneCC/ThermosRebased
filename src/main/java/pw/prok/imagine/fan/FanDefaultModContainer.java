// 
// Decompiled by Procyon v0.5.30
// 

package pw.prok.imagine.fan;

import cpw.mods.fml.relauncher.Side;
import java.security.cert.Certificate;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.versioning.VersionRange;
import cpw.mods.fml.common.LoadController;
import com.google.common.eventbus.EventBus;
import java.util.List;
import java.util.Set;
import cpw.mods.fml.common.MetadataCollection;
import cpw.mods.fml.common.versioning.DefaultArtifactVersion;
import pw.prok.imagine.inject.Creator;
import cpw.mods.fml.common.versioning.ArtifactVersion;
import java.io.File;
import cpw.mods.fml.common.ModMetadata;
import java.util.Map;
import cpw.mods.fml.common.discovery.ModCandidate;
import cpw.mods.fml.common.ModContainer;

public class FanDefaultModContainer implements ModContainer
{
    protected FanModContainer mContainer;
    protected Class<?> mFanClass;
    protected ModCandidate mCandidate;
    protected Map<String, Object> mModDescriptor;
    protected Fan mFan;
    protected ModMetadata mModMetadata;
    protected File mSource;
    protected Object mMod;
    protected ArtifactVersion mProcessedVersion;
    protected FanEventHandler mEventHandler;
    
    public FanDefaultModContainer(final FanModContainer container, final Class<?> clazz, final Fan fan, final ModCandidate candidate, final Map<String, Object> modDescriptor) {
        this.mContainer = container;
        this.mFanClass = clazz;
        this.mFan = fan;
        this.mCandidate = candidate;
        this.mModDescriptor = modDescriptor;
        this.mSource = this.mCandidate.getModContainer();
        this.mMod = Creator.creator(clazz).build();
        this.mModMetadata = new ModMetadata();
        this.mModMetadata.autogenerated = false;
        final String s = "";
        final ModMetadata mModMetadata = this.mModMetadata;
        final String id = this.mFan.id();
        mModMetadata.modId = id;
        if (s.equals(id)) {
            this.mModMetadata.modId = this.mFanClass.getName().toLowerCase();
        }
        final String s2 = "";
        final ModMetadata mModMetadata2 = this.mModMetadata;
        final String name = this.mFan.name();
        mModMetadata2.name = name;
        if (s2.equals(name)) {
            this.mModMetadata.name = this.mFanClass.getName();
        }
        final String s3 = "";
        final ModMetadata mModMetadata3 = this.mModMetadata;
        final String version = this.mFan.version();
        mModMetadata3.version = version;
        if (s3.equals(version)) {
            this.mModMetadata.version = "unknown";
        }
        this.mProcessedVersion = (ArtifactVersion)new DefaultArtifactVersion(this.mModMetadata.modId, this.mModMetadata.version);
        this.mEventHandler = new FanEventHandler(this.mCandidate, (ModContainer)this.mContainer, this.mMod, this.mFan);
    }
    
    public String getModId() {
        return this.mModMetadata.modId;
    }
    
    public String getName() {
        return this.mModMetadata.name;
    }
    
    public String getVersion() {
        return this.mModMetadata.version;
    }
    
    public File getSource() {
        return this.mSource;
    }
    
    public ModMetadata getMetadata() {
        return this.mModMetadata;
    }
    
    public void bindMetadata(final MetadataCollection metadataCollection) {
    }
    
    public void setEnabledState(final boolean b) {
    }
    
    public Set<ArtifactVersion> getRequirements() {
        return (Set<ArtifactVersion>)this.mModMetadata.requiredMods;
    }
    
    public List<ArtifactVersion> getDependencies() {
        return (List<ArtifactVersion>)this.mModMetadata.dependencies;
    }
    
    public List<ArtifactVersion> getDependants() {
        return (List<ArtifactVersion>)this.mModMetadata.dependants;
    }
    
    public String getSortingRules() {
        return "";
    }
    
    public boolean registerBus(final EventBus eventBus, final LoadController loadController) {
        eventBus.register((Object)this.mEventHandler);
        eventBus.register(this.mMod);
        return true;
    }
    
    public boolean matches(final Object o) {
        return this.mMod == o;
    }
    
    public FanModContainer getMod() {
        return this.mContainer;
    }
    
    public ArtifactVersion getProcessedVersion() {
        return this.mProcessedVersion;
    }
    
    public boolean isImmutable() {
        return true;
    }
    
    public String getDisplayVersion() {
        return this.mModMetadata.version;
    }
    
    public VersionRange acceptableMinecraftVersionRange() {
        return Loader.instance().getMinecraftModContainer().getStaticVersionRange();
    }
    
    public Certificate getSigningCertificate() {
        return null;
    }
    
    public Map<String, String> getCustomModProperties() {
        return null;
    }
    
    public Class<?> getCustomResourcePackClass() {
        return null;
    }
    
    public Map<String, String> getSharedModDescriptor() {
        return null;
    }
    
    public ModContainer.Disableable canBeDisabled() {
        return null;
    }
    
    public String getGuiClassName() {
        return null;
    }
    
    public List<String> getOwnedPackages() {
        return null;
    }
    
    public boolean checkModLists(final Map<String, String> modList, final Side side) {
        return true;
    }
    
    public void registerFan() {
        FanRegistry.registerFan(this.mFan, this.mContainer, this.mMod);
    }
}
